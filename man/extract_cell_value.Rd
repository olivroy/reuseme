% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dplyr-plus.R
\name{extract_cell_value}
\alias{extract_cell_value}
\title{Elegant wrapper around filter and pull}
\usage{
extract_cell_value(
  data,
  var,
  filter,
  name = NULL,
  length = NULL,
  unique = FALSE
)
}
\arguments{
\item{data}{A data.frame}

\item{var}{A variable specified as:
\itemize{
\item a literal variable name
\item a positive integer, giving the position counting from the left
\item a negative integer, giving the position counting from the right.
}

The default returns the last column (on the assumption that's the
column you've created most recently).

This argument is taken by expression and supports
\link[rlang:topic-inject]{quasiquotation} (you can unquote column
names and column locations).}

\item{filter}{the filter}

\item{name}{The variable for the name (by default, will look for \code{rownames}),
can be quoted (safer).}

\item{length}{A fixed length to check for the output}

\item{unique}{A logical. Should return unique values?}
}
\value{
A (named) character vector (if name is specified)
}
\description{
It can be very useful when trying to extract a value from somewhere, and you
have one col that represents the unique id.
}
\examples{
# extract the skin_color for C-3PO
extract_cell_value(
  data = dplyr::starwars,
  var = skin_color,
  filter = name == "C-3PO",
  length = 1 # ensure the length will be 1.
)
# will return a named vector of mpg (as mtcars has rownames.)
mtcars |>
  extract_cell_value(
    var = mpg,
    filter = vs == 0
  )

# Extract hair color for all people
extract_cell_value(
  data = dplyr::starwars,
  var = skin_color,
  filter = TRUE,
  name = "name" # ensure it is a named vector that corresponds to their unique ID
)
}
