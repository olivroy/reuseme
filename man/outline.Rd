% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outline.R
\name{outline}
\alias{outline}
\alias{file_outline}
\alias{proj_outline}
\alias{dir_outline}
\title{Print interactive outline of file sections}
\usage{
file_outline(
  path = active_rs_doc(),
  pattern = NULL,
  alpha = FALSE,
  print_todo = TRUE,
  recent_only = FALSE,
  dir_common = NULL
)

proj_outline(
  path = active_rs_proj(),
  pattern = NULL,
  dir_tree = FALSE,
  alpha = FALSE,
  recent_only = FALSE
)

dir_outline(
  path = ".",
  pattern = NULL,
  dir_tree = FALSE,
  alpha = FALSE,
  recent_only = FALSE,
  recurse = FALSE
)
}
\arguments{
\item{path}{A character vector of file paths, a \link[=proj_list]{project}.
Defaults to the \link[=active_rs_doc]{active file}, project or directory.}

\item{pattern}{A string or regex to search for in the outline. If
specified, will search only for elements matching this regular expression.
The print method will show the document title for context. Previously \code{regex_outline}}

\item{alpha}{Whether to show in alphabetical order}

\item{print_todo}{Should include TODOs in the file outline? If \code{FALSE}, will
print a less verbose output with sections.}

\item{recent_only}{Show outline for recent files}

\item{dir_common}{(Do not use it)}

\item{dir_tree}{If \code{TRUE}, will print the \code{\link[fs:dir_tree]{fs::dir_tree()}} or non-R files in
the directory}

\item{recurse}{If \code{TRUE} recurse fully, if a positive number the number of levels
to recurse.}
}
\value{
A \code{outline_report} object that contains the information. Inherits
\code{tbl_df}.

A symbol will show for recently modified files.
}
\description{
THe outline functions return a data frame that contains details of file location.

It also includes a print method that will provide a console output that will include \href{https://cli.r-lib.org/reference/links.html}{clickable hyperlinks}
in RStudio (or if your terminal supports it). It works with both (qR)md and R files.

Outline elements include
\itemize{
\item Any code section
\item function definition (not shown in console by default)
\item \code{TODO} items
\item Parse cli hyperlinks
\item Plot or table titles
\item FIgures caption in Quarto documents (limited support for multiline caption currently)
\item test names
\item Indicator of recent modification
\item Colored output for
\item URL and gh issue detection and link creation.
}

By default
\itemize{
\item \code{file_outline()} prints the outline the \link[=active_rs_doc]{active document} if in RStudio
\item \code{proj_outline()} prints the outline of the \link[usethis:proj_utils]{active project} if in RStudio
\item \code{dir_outline()} prints the outline of the \link[=getwd]{active working directory} by default or
}
}
\details{
\code{proj_outline()} and \code{dir_outline()} are wrapper of \code{file_outline()}.

In \code{proj_outline()}, \code{path} accepts project names, see \code{\link[=proj_list]{proj_list()}} for how to
set up reuseme to regognize your projects' locations.

The parser is very opinionated and is not very robust as it is based on regexps.
For a better file parser, explore other options, like \href{https://thinkr-open.github.io/lightparser/}{lightparser} for Quarto,  \code{{roxygen2}}

Will show TODO items and will offer a link to \link[=complete_todo]{mark them as complete}.

Note that \code{proj_outline()} strips some test files from the outline, as example
test files (like in usethis repo) don't help understand a project's outline.
Use \code{dir_outline(recurse = TRUE)} to make sure these are included in your outline.
}
\examples{
file <- fs::path_package("reuseme", "example-file", "outline-script.R")
file_outline(file)

# Remove todo items
file_outline(file, print_todo = FALSE, alpha = TRUE)

# interact with data frame
file_outline(file) |> dplyr::as_tibble()

\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# These all work on the active file / project or directory.

file_outline()
proj_outline()
dir_outline()
# Like proj_switch(), proj_outline() accepts a project
\dontshow{\}) # examplesIf}
}
