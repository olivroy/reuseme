% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/outline.R
\name{outline}
\alias{outline}
\alias{file_outline}
\alias{proj_outline}
\alias{dir_outline}
\title{Print interactive outline of file sections}
\usage{
file_outline(
  regex_outline = NULL,
  path = active_rs_doc(),
  work_only = TRUE,
  alpha = FALSE,
  dir_common = NULL,
  print_todo = TRUE,
  recent_only = FALSE,
  width = cli::console_width(),
  n_colors = NULL
)

proj_outline(
  regex_outline = NULL,
  proj = proj_get2(),
  work_only = TRUE,
  dir_tree = FALSE,
  alpha = FALSE,
  recent_only = FALSE
)

dir_outline(
  regex_outline = NULL,
  path = ".",
  work_only = TRUE,
  dir_tree = FALSE,
  alpha = FALSE,
  recent_only = FALSE
)
}
\arguments{
\item{regex_outline}{A string or regex to search for in the outline}

\item{path, proj}{A character vector of file paths, a \link[=proj_list]{project}. Defaults to active file, project or directory. \code{rstudioapi::documentPath()}}

\item{work_only}{If \code{TRUE}, (the default), will only show you work items first. Set to \code{FALSE} if you want to see the full outline. \code{WORK} will combine with \code{regex_outline}}

\item{alpha}{Whether to show in alphabetical order}

\item{dir_common}{(Do not use it)}

\item{print_todo}{Should include TODOs in the file outline?
If \code{FALSE}, will print a less verbose output with sections.}

\item{recent_only}{Show outline for recent files}

\item{width}{Width (internal)}

\item{n_colors}{Number colours (Internal)}

\item{dir_tree}{If \code{TRUE}, will print the \code{\link[fs:dir_tree]{fs::dir_tree()}} or non-R files in the directory}
}
\value{
A \code{reuseme_outline} object that contains the information. Inherits
\code{tbl_df}.

A symbol will show for recently modified files.
}
\description{
RStudio project, or directories
This will fail if you are trying to map an unsaved file.
}
\details{
If \code{work_only} is set to \code{TRUE}, the function will only return outline of the \verb{# WORK} comment
in \code{path}. \code{work_only = TRUE} will have an effect on regex_outline.
These functions are more
By default
\itemize{
\item \code{file_outline()} prints the outline the \href{active_document}{\verb{active document}} if in RStudio
\item \code{proj_outline()} prints the outline of the active project if in RStudio
\item \code{dir_outline()} prints the outline of the active working directory by default or
}

proj_* and dir_ call file_outline.

The parser is very opinioneted and is not very robust as it is based on regexps.
For a better file parser, explore other options, like \href{https://thinkr-open.github.io/lightparser/}{lightparser}, \code{{roxygen2}}

Will show TODO items and will offer a link to \link[=mark_todo_as_complete]{mark them as complete}
}
\examples{
file <- fs::path_package("example-file", "basic-script.R")
file_outline(path = file)

# Remove TODO
file_outline(path = file, print_todo = FALSE, alpha = TRUE)

# interact with data frame
file_outline(path = file) |> dplyr::as_tibble()
\dontshow{if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# These all work on the active file / project or directory.
file_outline()
proj_outline()
dir_outline()
# Like proj_switch(), proj_outline() accepts a project
\dontshow{\}) # examplesIf}
}
